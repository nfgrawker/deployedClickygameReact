{"version":3,"sources":["components/Navbar/Navbar.js","components/ImageCard/ImageCard.js","components/Clickbody/Clickbody.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","score","totalscore","ImageCard","onClick","fun","alt","name","src","image","Clickbody","state","topscore","images","tempList","newList","clickedImages","clickerFunction","event","console","log","_this","includes","id","setState","alert","clicked","Object","toConsumableArray","push","randomOutput","temp","length","randNum","Math","floor","random","splice","this","_this2","components_Navbar_Navbar","map","components_ImageCard_ImageCard","key","React","Component","App","components_Clickbody_Clickbody","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+rIAYeA,eATA,SAACC,GAAD,OACPC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wDACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,wBAAhB,eACAH,EAAAC,EAAAC,cAAA,YAAMF,EAAAC,EAAAC,cAAA,oBAAYH,EAAMK,OAAUJ,EAAAC,EAAAC,cAAA,wBAAgBH,EAAMM,gBCKrDC,SARG,SAACP,GAAD,OACdC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYI,QAAS,kBAAIR,EAAMS,IAAIT,KAC9CC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKO,IAAKV,EAAMW,KAAMC,IAAKZ,EAAMa,mBCuD9BC,6MAtDXC,MAAQ,CACJV,MAAM,EACNW,SAAS,EACTC,OAAOA,EACPC,SAASD,EACTE,QAAQ,GACRC,cAAc,MAMlBC,gBAAkB,SAACC,GAEjB,GADEC,QAAQC,IAAIF,GACXG,EAAKV,MAAMK,cAAcM,SAASJ,EAAMK,IACzCF,EAAKG,SAAS,CAACvB,MAAM,IACrBwB,MAAM,iCACNJ,EAAKG,SAAS,CAACR,cAAc,UAE1B,IAAKK,EAAKV,MAAMK,cAAcM,SAASJ,EAAMK,IAAI,CAClD,IAAMG,EAAOC,OAAAC,EAAA,EAAAD,CAAON,EAAKV,MAAMK,eAC/BU,EAAQG,KAAKX,EAAMK,IACnBJ,QAAQC,IAAIM,GACZL,EAAKG,SAAS,CAACvB,MAAOoB,EAAKV,MAAMV,MAAM,IACvCoB,EAAKG,SAAS,CAACR,cAAcU,IAC1BL,EAAKV,MAAMV,OAASoB,EAAKV,MAAMC,UAC9BS,EAAKG,SAAS,CAACZ,SAASS,EAAKV,MAAMV,MAAM,IAIjDoB,EAAKS,kBAEPA,aAAe,WAGb,IAFA,IAAMf,EAAU,GACVgB,EAAIJ,OAAAC,EAAA,EAAAD,CAAOd,GACXE,EAAQiB,OAASX,EAAKV,MAAME,OAAOmB,QAAO,CAC9C,IAAIC,EAAUC,KAAKC,MAAMD,KAAKE,SAASL,EAAKC,QAC5CjB,EAAQc,KAAKE,EAAKM,OAAOJ,EAAQ,GAAG,IAEtCZ,EAAKG,SAAS,CAACT,QAASA,EAASD,SAAUD,wFA7BzCyB,KAAKR,gDA+BD,IAAAS,EAAAD,KACJ,OACEzC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAACyC,EAAD,CAAQvC,MAAOqC,KAAK3B,MAAMV,MAAOC,WAAYoC,KAAK3B,MAAMC,WACxDf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACZsC,KAAK3B,MAAMI,QAAQ0B,IAAI,SAAChC,GAAD,OAASZ,EAAAC,EAAAC,cAAC2C,EAAD,CAAWC,IAAKlC,EAAMc,GAAIA,GAAId,EAAMc,GAAIhB,KAAME,EAAMF,KAAME,MAAOA,EAAMA,MAAOJ,IAAKkC,EAAKtB,6BA/C/G2B,IAAMC,WCQfC,mLARX,OACIjD,EAAAC,EAAAC,cAACgD,EAAD,aAHUF,aCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.334cf99c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Navbar.css\";\r\n\r\nconst Navbar = (props)=> (\r\n        <nav className=\"navbar navbar-light bg-light justify-content-between\">\r\n            <span className=\"navbar-brand mb-0 h1\">Clicky Game</span>\r\n            <span><p>Score : {props.score}</p><p>Top Score : {props.totalscore}</p></span>\r\n        </nav>\r\n\r\n\r\n    );\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport \"./ImageCard.css\";\r\n\r\nconst ImageCard = (props)=> (\r\n    <div className=\"card mb-2\" onClick={()=>props.fun(props)}>\r\n        <div className=\"img-container\">\r\n            <img alt={props.name} src={props.image}/>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default ImageCard;\r\n","import React from \"react\";\r\nimport \"./Clickbody.css\";\r\nimport Navbar from \"../Navbar\";\r\nimport ImageCard from '../ImageCard';\r\nimport images from '../../info.json';\r\n\r\nclass Clickbody extends React.Component{\r\n    state = {\r\n        score:0,\r\n        topscore:0,\r\n        images:images,\r\n        tempList:images,\r\n        newList:[],\r\n        clickedImages:[]\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.randomOutput()\r\n    }\r\n    clickerFunction = (event)=>{\r\n        console.log(event)\r\n      if(this.state.clickedImages.includes(event.id)){\r\n        this.setState({score:0})\r\n        alert(\"You have already guessed this\")\r\n        this.setState({clickedImages:[]})\r\n      }\r\n      else if (!this.state.clickedImages.includes(event.id)){\r\n          const clicked = [...this.state.clickedImages]\r\n          clicked.push(event.id)\r\n          console.log(clicked)\r\n          this.setState({score: this.state.score+1})\r\n          this.setState({clickedImages:clicked})\r\n          if(this.state.score >= this.state.topscore){\r\n              this.setState({topscore:this.state.score+1})\r\n          }\r\n\r\n      }\r\n      this.randomOutput()\r\n    }\r\n    randomOutput = ()=>{\r\n      const newList = []\r\n      const temp = [...images]\r\n      while(newList.length < this.state.images.length){\r\n        let randNum = Math.floor(Math.random()*temp.length)\r\n        newList.push(temp.splice(randNum,1)[0])\r\n      }\r\n      this.setState({newList: newList, tempList: images},)\r\n    }\r\n    render(){\r\n        return(\r\n          <div className=\"wrapper\">\r\n            <Navbar score={this.state.score} totalscore={this.state.topscore}/>\r\n            <div className=\"cards\">\r\n              {this.state.newList.map((image)=><ImageCard key={image.id} id={image.id} name={image.name} image={image.image} fun={this.clickerFunction}/>)}\r\n            </div>\r\n          </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Clickbody;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport Clickbody from \"./components/Clickbody\"\n\nclass App extends Component {\n  render() {\n    return (\n        <Clickbody />\n\n    )\n    // return <p>App</p>\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}